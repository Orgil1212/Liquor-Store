package controllers

import (
	"fmt"
	"liquor-store/config"
	"liquor-store/models"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

// –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –∞–≤–∞—Ö API
func GetProducts(c *gin.Context) {
	var products []models.Product

	// üìå ”®–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–≥–∞–∞—Å –±“Ø—Ö –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π–≥ –∞–≤–∞—Ö
	result := config.DB.Find(&products)

	if result.Error != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": result.Error.Error()})
		return
	}

	// üìå –•—ç—Ä—ç–≤ –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –æ–ª–¥–æ–æ–≥“Ø–π –±–æ–ª 404 –±—É—Ü–∞–∞—Ö
	if len(products) == 0 {
		c.JSON(http.StatusNotFound, gin.H{"error": "No products found"})
		return
	}

	// ‚úÖ JSON —Ñ–æ—Ä–º–∞—Ç—Ç–∞–π —Ö–∞—Ä–∏—É –±—É—Ü–∞–∞—Ö
	c.JSON(http.StatusOK, products)
}

func CreateProduct(c *gin.Context) {
	// 1. **Log content-type**
	fmt.Println("Content-Type:", c.Request.Header.Get("Content-Type"))

	// 2. **Multipart form –∑–∞–¥–ª–∞—Ö**
	err := c.Request.ParseMultipartForm(32 << 20) // 32MB —Ö“Ø—Ä—Ç—ç–ª —Ñ–∞–π–ª—ã–Ω —Ö—ç–º–∂—ç—ç –∑”©–≤—à”©”©—Ä”©—Ö
	if err != nil {
		fmt.Println("Error parsing form:", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "Failed to parse form data"})
		return
	}

	// 3. **–ó”©–≤ –∞—Ä–≥–∞–∞—Ä ”©–≥”©–≥–¥”©–ª —É–Ω—à–∏—Ö (`c.Request.FormValue`)**
	name := c.Request.FormValue("name")
	priceStr := c.Request.FormValue("price")
	description := c.Request.FormValue("description")

	// 4. **–®–∞–ª–≥–∞—Ö**
	fmt.Println("Received name:", name)
	fmt.Println("Received price:", priceStr)
	fmt.Println("Received description:", description)

	// 5. **Price —Ö”©—Ä–≤“Ø“Ø–ª—ç—Ö**
	price, err := strconv.ParseFloat(priceStr, 64)
	if err != nil || price <= 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid price format"})
		return
	}

	// 6. **–§–∞–π–ª –∞–≤–∞—Ö**
	file, err := c.FormFile("image")
	if err != nil {
		fmt.Println("Image file not found:", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "Image file is required"})
		return
	}

	// 7. **–§–∞–π–ª—ã–≥ —Å–µ—Ä–≤–µ—Ä –¥—ç—ç—Ä —Ö–∞–¥–≥–∞–ª–∞—Ö**
	filePath := "./uploads/" + file.Filename
	if err := c.SaveUploadedFile(file, filePath); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to save image"})
		return
	}

	// 8. **–®–∏–Ω—ç –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω “Ø“Ø—Å–≥—ç—Ö**
	product := models.Product{
		Name:        name,
		Price:       price,
		Description: description,
		Image:       filePath,
	}

	// 9. **–®–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π —Ç–∞–ª–±–∞—Ä—É—É–¥—ã–≥ —à–∞–ª–≥–∞—Ö**
	if product.Name == "" || product.Price == 0 || product.Description == "" || product.Image == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "All fields are required"})
		return
	}

	// 10. **”®–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–¥ –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –Ω—ç–º—ç—Ö**
	if err := config.DB.Create(&product).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to add product"})
		return
	}

	// 11. **–ê–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞—Ä–∏—É –±—É—Ü–∞–∞—Ö**
	c.JSON(http.StatusOK, gin.H{"message": "Product added successfully", "product": product})
}

func DeleteProduct(c *gin.Context) {
	// URL-–∞–∞—Å `id` –∞–≤–∞—Ö
	id := c.Param("id")

	// ”®–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–¥ —Ç—É—Ö–∞–π–Ω –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
	var product models.Product
	if err := config.DB.First(&product, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Product not found"})
		return
	}

	// –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π–≥ —É—Å—Ç–≥–∞—Ö
	if err := config.DB.Delete(&product).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to delete product"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Product deleted successfully"})
}
