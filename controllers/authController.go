package controllers

import (
	"encoding/hex"
	"fmt"
	"liquor-store/config"
	"liquor-store/models"
	"math/rand" // üìå –°–∞–Ω–∞–º—Å–∞—Ä–≥“Ø–π —Ç–æ–æ “Ø“Ø—Å–≥—ç—Ö —Å–∞–Ω
	"net/http"
	"time"

	"github.com/dgrijalva/jwt-go"
	"github.com/gin-gonic/gin"
	"golang.org/x/crypto/argon2"
)

const (
	Argon2Time      uint32 = 3         // –ò—Ç–µ—Ä–∞—Ü–∏–π–Ω —Ç–æ–æ
	Argon2Memory    uint32 = 64 * 1024 // 64MB —Å–∞–Ω–∞—Ö –æ–π
	Argon2Threads   uint8  = 4         // –ó—ç—Ä—ç–≥—Ü—ç—ç —É—Ç–∞—Å
	Argon2KeyLength uint32 = 32        // –•—ç—à–∏–π–Ω —É—Ä—Ç (–±–∞–π—Ç)
)

// –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞–≤–∞—Ö JWT —Ö–∞–º–≥–∞–∞–ª–∞–≥–¥—Å–∞–Ω API
func GetProfile(c *gin.Context) {
	// HTTP header-–∞–∞—Å —Ç–æ–∫–µ–Ω—ã–≥ –∞–≤–∞—Ö
	tokenString := c.GetHeader("Authorization")

	if tokenString == "" {
		c.JSON(401, gin.H{"error": "–¢–æ–∫–µ–Ω –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞!"})
		return
	}

	// "Bearer " –≥—ç—Å—ç–Ω —ç—Ö–Ω–∏–π 7 —Ç—ç–º–¥—ç–≥—Ç–∏–π–≥ —Ö–∞—Å–∞—Ö
	tokenString = tokenString[7:]

	// JWT —Ç–æ–∫–µ–Ω—ã–≥ —à–∞–ª–≥–∞—Ö
	claims := &jwt.MapClaims{}
	token, err := jwt.ParseWithClaims(tokenString, claims, func(token *jwt.Token) (interface{}, error) {
		return []byte("your-secret-key"), nil
	})

	if err != nil || !token.Valid {
		c.JSON(401, gin.H{"error": "–•“Ø—á–∏–Ω–≥“Ø–π —Ç–æ–∫–µ–Ω!"})
		return
	}

	// –¢–æ–∫–µ–Ω—ç—ç—Å —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω ID –∞–≤–∞—Ö
	userID, ok := (*claims)["id"].(float64)
	if !ok {
		c.JSON(400, gin.H{"error": "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω ID –æ–ª–¥—Å–æ–Ω–≥“Ø–π!"})
		return
	}

	// ”®–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–≥–∞–∞—Å —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞–≤–∞—Ö
	var user models.User
	if err := config.DB.First(&user, int(userID)).Error; err != nil {
		c.JSON(404, gin.H{"error": "–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π!"})
		return
	}

	// –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –±—É—Ü–∞–∞—Ö
	c.JSON(200, gin.H{
		"id":    user.ID,
		"email": user.Email,
		"name":  user.Name,
	})
}

func Register(c *gin.Context) {
	var input struct {
		Name     string `json:"name"`
		Email    string `json:"email"`
		Password string `json:"password"`
	}

	// JSON ”©–≥”©–≥–¥–ª–∏–π–≥ –∞–≤–∞—Ö
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(400, gin.H{"error": "JSON ”©–≥”©–≥–¥”©–ª –±—É—Ä—É—É –±–∞–π–Ω–∞!"})
		return
	}

	// –ù—É—É—Ü “Ø–≥ —Ö–∞–º–≥–∏–π–Ω –±–∞–≥–∞–¥–∞–∞ 8 —Ç—ç–º–¥—ç–≥—Ç—Ç—ç–π –±–∞–π—Ö —ë—Å—Ç–æ–π
	if len(input.Password) < 8 {
		c.JSON(400, gin.H{"error": "–ù—É—É—Ü “Ø–≥ —Ö–∞–º–≥–∏–π–Ω –±–∞–≥–∞–¥–∞–∞ 8 —Ç—ç–º–¥—ç–≥—Ç—Ç—ç–π –±–∞–π—Ö —ë—Å—Ç–æ–π!"})
		return
	}

	// –ò–º—ç–π–ª –¥–∞–≤—Ö—Ü–∞—Ö–≥“Ø–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
	var existingUser models.User
	if err := config.DB.Where("email = ?", input.Email).First(&existingUser).Error; err == nil {
		c.JSON(400, gin.H{"error": "–≠–Ω—ç –∏–º—ç–π–ª –∞–ª—å —Ö—ç–¥–∏–π–Ω –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω –±–∞–π–Ω–∞!"})
		return
	}

	// –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –±—ç–ª—Ç–≥—ç—Ö
	verificationToken := fmt.Sprintf("%x", time.Now().UnixNano()) // –¢–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö

	user := models.User{
		Name:              input.Name,
		Email:             input.Email,
		Password:          input.Password,
		Verified:          false,
		VerificationToken: verificationToken, // –¢–æ–∫–µ–Ω—ã–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö
	}

	// –ù—É—É—Ü “Ø–≥–∏–π–≥ —à–∏—Ñ—Ä–ª—ç—Ö
	hashedPassword, salt, err := hashPassword(input.Password)
	if err != nil {
		c.JSON(500, gin.H{"error": "–ù—É—É—Ü “Ø–≥–∏–π–≥ —à–∏—Ñ—Ä–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞!"})
		return
	}
	user.Password = hashedPassword
	user.Salt = salt

	// ”®–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–¥ —Ö–∞–¥–≥–∞–ª–∞—Ö
	if err := config.DB.Create(&user).Error; err != nil {
		c.JSON(500, gin.H{"error": "”®–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–¥ —Ö–∞–¥–≥–∞–ª–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞!"})
		return
	}

	c.JSON(200, gin.H{
		"message":            "–ë“Ø—Ä—Ç–≥—ç–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π! –ò–º—ç–π–ª—ç—ç —à–∞–ª–≥–∞–Ω–∞ —É—É.",
		"verification_token": user.VerificationToken,
	})
}

// JWT “Ø“Ø—Å–≥—ç—Ö —Ñ—É–Ω–∫—Ü

func hashPassword(password string) (string, string, error) {
	// –°–∞–Ω–∞–º—Å–∞—Ä–≥“Ø–π salt “Ø“Ø—Å–≥—ç—Ö
	salt := make([]byte, 16)
	_, err := rand.Read(salt)
	if err != nil {
		return "", "", err
	}

	// Argon2 —Ö—ç—à “Ø“Ø—Å–≥—ç—Ö
	hash := argon2.IDKey([]byte(password), salt, Argon2Time, Argon2Memory, Argon2Threads, Argon2KeyLength)

	// Debug –º—ç–¥—ç—ç–ª—ç–ª
	fmt.Printf("‚úÖ HashPassword:\n - Password: %s\n - Salt: %x\n - Hash: %x\n", password, salt, hash)

	return fmt.Sprintf("%x", hash), fmt.Sprintf("%x", salt), nil
}

func comparePassword(hashedPassword, salt, password string) bool {
	// Salt —Ö”©—Ä–≤“Ø“Ø–ª—ç—Ö
	saltBytes, err := hex.DecodeString(salt)
	if err != nil {
		fmt.Println("‚ùå Salt —Ö”©—Ä–≤“Ø“Ø–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", err)
		return false
	}

	// Argon2 —Ö—ç—à “Ø“Ø—Å–≥—ç—Ö
	newHash := argon2.IDKey([]byte(password), saltBytes, Argon2Time, Argon2Memory, Argon2Threads, Argon2KeyLength)

	// Debug –º—ç–¥—ç—ç–ª—ç–ª
	fmt.Printf("üîç ComparePassword:\n - Password: %s\n - Salt: %x\n - HashedPassword: %s\n - NewHash: %x\n", password, saltBytes, hashedPassword, newHash)

	return hashedPassword == fmt.Sprintf("%x", newHash)
}

// –ù—ç–≤—Ç—Ä—ç—Ö —Ñ—É–Ω–∫—Ü
func Login(c *gin.Context) {
	var input struct {
		Email    string `json:"email"`
		Password string `json:"password"`
	}

	if err := c.ShouldBindJSON(&input); err != nil {
		fmt.Println("‚ùå JSON Parse Error:", err)
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	var user models.User
	if err := config.DB.Where("email = ?", input.Email).First(&user).Error; err != nil {
		fmt.Println("‚ùå User not found")
		c.JSON(401, gin.H{"error": "–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π!"})
		return
	}

	// –ù—É—É—Ü “Ø–≥–∏–π–≥ —à–∞–ª–≥–∞—Ö
	if !comparePassword(user.Password, user.Salt, input.Password) {
		fmt.Println("‚ùå Incorrect password")
		c.JSON(401, gin.H{"error": "–ù—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞!"})
		return
	}

	// JWT “Ø“Ø—Å–≥—ç—Ö
	token, err := GenerateJWT(user)
	if err != nil {
		fmt.Println("‚ùå JWT generation failed:", err)
		c.JSON(500, gin.H{"error": "JWT “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞!"})
		return
	}

	// ‚úÖ Debug Log - JSON Response —Ö–∞—Ä–∞—Ö
	responseData := gin.H{"token": token, "message": "Login successful"}
	fmt.Println("‚úÖ Sending JSON Response:", responseData)

	// ‚úÖ JSON ”©–≥”©–≥–¥–ª–∏–π–≥ –∑”©–≤ –±—É—Ü–∞–∞—Ö
	c.JSON(200, responseData)
}

func GetAllUsers(c *gin.Context) {
	var users []models.User

	// –ë“Ø—Ö —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω ”©–≥”©–≥–¥–ª–∏–π–≥ –∞–≤–∞—Ö
	if err := config.DB.Find(&users).Error; err != nil {
		c.JSON(500, gin.H{"error": "–•—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–Ω –∂–∞–≥—Å–∞–∞–ª—Ç—ã–≥ –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞!"})
		return
	}

	// –•—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–Ω –∂–∞–≥—Å–∞–∞–ª—Ç—ã–≥ –±—É—Ü–∞–∞—Ö
	c.JSON(200, gin.H{"users": users})
}

func GenerateJWT(user models.User) (string, error) {
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"id":    user.ID,
		"email": user.Email,
		"role":  user.Role, // Role —Ç–∞–ª–±–∞—Ä –∞—à–∏–≥–ª–∞–∂ –±–∞–π–≥–∞–∞ —Ö—ç—Å—ç–≥
		"exp":   time.Now().Add(time.Hour * 72).Unix(),
	})
	return token.SignedString([]byte("your-secret-key"))
}
func CheckUserExists(c *gin.Context) {
	var input struct {
		Email string `json:"email"`
	}

	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Email –∑–∞–∞–≤–∞–ª —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π!"})
		return
	}

	var user models.User
	if err := config.DB.Where("email = ?", input.Email).First(&user).Error; err != nil {
		c.JSON(http.StatusOK, gin.H{"exists": false, "message": "–•—ç—Ä—ç–≥–ª—ç–≥—á –±“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π –±–∞–π–Ω–∞."})
		return
	}

	c.JSON(http.StatusOK, gin.H{"exists": true, "message": "–•—ç—Ä—ç–≥–ª—ç–≥—á –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞."})
}

func GenerateTemporaryPassword() string {
	return fmt.Sprintf("%06d", rand.Intn(1000000))
}
