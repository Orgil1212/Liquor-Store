package controllers

import (
	"fmt"
	"liquor-store/config"
	"liquor-store/models" // üìå –°–∞–Ω–∞–º—Å–∞—Ä–≥“Ø–π —Ç–æ–æ “Ø“Ø—Å–≥—ç—Ö —Å–∞–Ω
	"net/http"

	"github.com/dgrijalva/jwt-go"
	"github.com/gin-gonic/gin"
)

func VerifyEmail(c *gin.Context) {
	tokenString := c.Param("token") // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–π–≥ –∞–≤—á –±–∞–π–Ω–∞

	// –¢–æ–∫–µ–Ω —à–∞–ª–≥–∞—Ö
	claims := &jwt.MapClaims{}
	token, err := jwt.ParseWithClaims(tokenString, claims, func(token *jwt.Token) (interface{}, error) {
		return []byte("your-secret-key"), nil
	})

	if err != nil || !token.Valid {
		c.JSON(400, gin.H{"error": "–•“Ø—á–∏–Ω–≥“Ø–π –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –ª–∏–Ω–∫!"})
		return
	}

	email, ok := (*claims)["email"].(string)
	if !ok {
		c.JSON(400, gin.H{"error": "–ò–º—ç–π–ª –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π!"})
		return
	}

	var user models.User
	if err := config.DB.Where("email = ?", email).First(&user).Error; err != nil {
		c.JSON(404, gin.H{"error": "–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π!"})
		return
	}

	user.Verified = true
	config.DB.Save(&user)
	if err != nil {
		fmt.Println("Token Error: ", err)
	}
	if !token.Valid {
		fmt.Println("Invalid Token!")
	}

	c.JSON(200, gin.H{"message": "–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π!"})
}

func VerifyCode(c *gin.Context) {
	var input struct {
		Email            string `json:"email"`
		VerificationCode string `json:"verification_code"`
	}

	// –ò–º—ç–π–ª –±–æ–ª–æ–Ω –∫–æ–¥—ã–≥ –∞–≤–∞—Ö
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ë“Ø—Ö —Ç–∞–ª–±–∞—Ä—É—É–¥ —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π!"})
		return
	}

	// –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –æ–ª–æ—Ö
	var user models.User
	if err := config.DB.Where("email = ?", input.Email).First(&user).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π!"})
		return
	}

	// “Æ“Ø—Å–≥—ç—Å—ç–Ω –∫–æ–¥—Ç–æ–π —Ö–∞—Ä—å—Ü—É—É–ª–∞—Ö
	if user.VerificationCode != input.VerificationCode {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–¢”©—Ä”©–ª –∫–æ–¥ –±—É—Ä—É—É –±–∞–π–Ω–∞!"})
		return
	}

	// –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç
	user.Verified = true
	config.DB.Save(&user)

	c.JSON(http.StatusOK, gin.H{"message": "–ò–º—ç–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω!"})
}
