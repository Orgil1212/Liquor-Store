package routes

import (
	"liquor-store/controllers"
	"net/http"
	"time"

	"github.com/dgrijalva/jwt-go"
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
)

func SetupRouter() *gin.Engine {
	r := gin.Default()
	// üìå CORS —Ç–æ—Ö–∏—Ä–≥–æ–æ —Ö–∏–π—Ö
	r.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"http://localhost:3000"}, // Frontend-—ç—ç—Å –∑”©–≤—à”©”©—Ä”©—Ö
		AllowMethods:     []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Authorization"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}))

	api := r.Group("/api")
	{
		api.POST("/register", controllers.Register)
		api.POST("/login", controllers.Login)
		api.GET("/profile/:id", controllers.GetProfile)
		api.POST("/check-user", controllers.CheckUserExists) // üìå –•—ç—Ä—ç–≥–ª—ç–≥—á –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö API
		api.POST("/forgot-password", controllers.ForgotPassword)
		api.GET("/verify-email/:token", controllers.VerifyEmail)   // –¢–æ–∫–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–π–≥ –∑”©–≤—à”©”©—Ä”©—Ö
		api.GET("/products", controllers.GetProducts)              // –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –∞–≤–∞—Ö
		api.POST("/products", controllers.CreateProduct)           // –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –Ω—ç–º—ç—Ö
		api.PUT("/update-profile", controllers.UpdateProfile)      // üìå –ü—Ä–æ—Ñ–∞–π–ª —à–∏–Ω—ç—á–ª—ç—Ö API
		api.DELETE("/api/products/:id", controllers.DeleteProduct) //
		api.POST("/api/cart", controllers.AddToCart)               // üõí –°–∞–≥—Å–∞–Ω–¥ –Ω—ç–º—ç—Ö
		api.GET("/api/cart/:user_id", controllers.GetCart)         // üì¶ –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Å–∞–≥—Å—ã–≥ –∞–≤–∞—Ö
		api.DELETE("/api/cart/:id", controllers.RemoveFromCart)    // ‚ùå –°–∞–≥—Å–Ω–∞–∞—Å –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω —Ö–∞—Å–∞—Ö

		// –ê–¥–º–∏–Ω API
		admin := api.Group("/admin")
		admin.Use(AdminMiddleware()) // –ê–¥–º–∏–Ω middleware –∞—à–∏–≥–ª–∞—Ö
		{
			admin.GET("/users", controllers.GetAllUsers) // –ñ–∏—à—ç—ç –∞–¥–º–∏–Ω API
		}
	}

	return r
}

// AdminMiddleware - –∑”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–≥ –∑”©–≤—à”©”©—Ä–Ω”©
func AdminMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		// Authorization header-–∞–∞—Å —Ç–æ–∫–µ–Ω—ã–≥ –∞–≤–∞—Ö
		tokenString := c.GetHeader("Authorization")

		if tokenString == "" {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "–¢–æ–∫–µ–Ω –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞!"})
			c.Abort()
			return
		}

		// "Bearer " “Ø–≥–∏–π–≥ –∞—Ä–∏–ª–≥–∞—Ö
		if len(tokenString) > 7 && tokenString[:7] == "Bearer " {
			tokenString = tokenString[7:]
		}

		// JWT —Ç–æ–∫–µ–Ω—ã–≥ —à–∞–ª–≥–∞—Ö
		claims := &jwt.MapClaims{}
		token, err := jwt.ParseWithClaims(tokenString, claims, func(token *jwt.Token) (interface{}, error) {
			return []byte("your-secret-key"), nil
		})

		if err != nil || !token.Valid {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "–•“Ø—á–∏–Ω–≥“Ø–π —Ç–æ–∫–µ–Ω!"})
			c.Abort()
			return
		}

		// –¢–æ–∫–µ–Ω–æ–æ—Å role —Ç–∞–ª–±–∞—Ä—ã–≥ —à–∞–ª–≥–∞—Ö
		role, ok := (*claims)["role"].(string)
		if !ok || role != "admin" {
			c.JSON(http.StatusForbidden, gin.H{"error": "–ê–¥–º–∏–Ω —ç—Ä—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π!"})
			c.Abort()
			return
		}

		c.Next()
	}
}
